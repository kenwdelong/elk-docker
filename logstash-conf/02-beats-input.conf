input {
  beats {
    port => 5044
    ssl => false
#    ssl_certificate => "/etc/pki/tls/certs/logstash-beats.crt"
#    ssl_key => "/etc/pki/tls/private/logstash-beats.key"
	 type => "beats"
  }
}
filter {
	# metadata field: https://www.elastic.co/guide/en/logstash/current/event-dependent-configuration.html
	if [type] == "beats" {
	    grok {
	        match => { "message" => "%{HTTPD_FIXED_COMBINEDLOG} (%{NOTSPACE:hbhost}) ?(%{NOTSPACE:ssl_protocol})? ?(%{NOTSPACE:ssl_cipher})? ?(%{NOTSPACE:request_time})? ?(%{NOTSPACE:upstream_time})? ?%{GREEDYDATA:extra}" }
	        # use this to figure it out https://grokdebugger.com/ very cool
	    }
	    geoip {
	        source => "clientip"
	        target => "geoip"
        	database  => "/etc/logstash/GeoLite2-City/GeoLite2-City.mmdb"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
	    }
	    mutate {
			gsub => [
				"referrer", "\"", "",
				"user_agent", "\"", ""
			]
		}
		# One day we might need https://stackoverflow.com/questions/18330541/how-to-handle-multiple-heterogeneous-inputs-with-logstash
		# Problem with host field https://discuss.elastic.co/t/logstash-errors-after-upgrading-to-filebeat-6-3-0/135984/6
		# General docs:  https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html
		mutate {
			rename => { "clientip" => "remoteHost" }
			rename => { "user_agent" => "userAgent" }
			rename => { "request" => "uri" }
			rename => { "response" => "httpResponseCode" }
			rename => { "verb" => "httpMethod" }
			rename => { "bytes" => "bytesSent" }
			rename => { "ssl_protocol" => "sslProtocol" }
			rename => { "ssl_cipher" => "sslCipher" }
			rename => { "[fields][appName]" => "appName" }
			rename => { "[fields][env]" => "serverEnv" }
			rename => { "[fields][hostname]" => "HOSTNAME" }
			copy   => { "hbhost" => "dnsName" } 
			remove_field => [ "auth", "ident", "offset", "prospector.type", "host" ]
		}
		# Get the device MAC, if possible
		if [uri] =~ /[\?\&]?mac\=.*/ {
			# These regex's handle MAC's with ':', '-' or no separators
			grok {
				match => { "uri" => "[\?\&]?mac=(?<macAddress>[A-Fa-f0-9\:-]*)" }
			}
			if [macAddress] {
				mutate {
					uppercase => [ "macAddress" ]
				}
				# Format MAC to our preferred format, if needed
				if [macAddress] !~ /[:]{5}/ {
					mutate {
						gsub => [
							"macAddress", "^([0-9A-F]{2})-?([0-9A-F]{2})-?([0-9A-F]{2})-?([0-9A-F]{2})-?([0-9A-F]{2})-?([0-9A-F]{2})$", "\1:\2:\3:\4:\5:\6"
						]
					}
				}
			}
		}
		# convert request & upstream processing times to 'ms' & populate
		if [request_time] {
			ruby {
				code => 'event.set("requestProcessingTime", (event.get("request_time").to_f * 1000))'
			}
		}
		if [upstream_time] {
			ruby {
				code => 'event.set("upstreamProcessingTime", (event.get("upstream_time").to_f * 1000))'
			}
		}
	  	mutate {
	  		remove_field => [ "fields", "request_time", "upstream_time" ]
			convert => [ "[geoip][coordinates]", "float"]
			convert => [ "bytesSent", "integer"]
			convert => [ "httpResponseCode", "integer"]

			# Conflict still exists between Filebeats & logstash HTTPD_COMBINEDLOG 'agent' fields [2025-01-30]
			# Fixed by using a custom httpd grok pattern -- see httpd-fixed.pattern [2025-01-31]
			#remove_field => [ "userAgent" ]
		}
		date {
			match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
			remove_field => [ "timestamp" ]
		}
	}
}